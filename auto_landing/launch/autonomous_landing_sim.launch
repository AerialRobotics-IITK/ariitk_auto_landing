<?xml version="1.0"?>
<launch>   
 
    <arg name="mav_name"                     default="firefly" />
    <arg name="x"                            default="5.0" />
    <arg name="y"                            default="5.0" />
    <arg name="publish_visualization_marker" default="false" />
    <arg name="use_trajectory_generation"    default="false" />
    <arg name="use_detection"                default="true" />
    <arg name="use_odometry_for_platform"    default="$(arg use_detection)" />
    <arg name="use_wind"                     default="false" />
    <arg name="trajectory"                   default="random" />

    <!-- The possible values for trajectory field are:= random, circular, eight, linear, user.
    Using random randomly selects from circular, eight and linear trajectories.
    Using user allows the user to control the platform with the keyboard. -->

    <node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" args="--perspective-file $(find auto_landing)/rqt/node_monitor.perspective" />
        
    <include file="$(find auto_landing)/launch/world_setup.launch" >
        <arg name="mav_name"                     value="$(arg mav_name)" />
        <arg name="x"                            value="$(arg x)" />
        <arg name="y"                            value="$(arg y)" />
        <arg name="use_wind"                     value="$(arg use_wind)" />
        <arg name="trajectory"                   value="$(arg trajectory)" />
    </include>

    <include file="$(find tracking)/launch/tracker_sim.launch">
        <arg name="publish_visualization_marker" value="$(arg publish_visualization_marker)" />
        <arg name="use_trajectory_generation"    value="$(arg use_trajectory_generation)" />    
        <arg name="use_odometry_for_platform"    value="$(arg use_odometry_for_platform)" />    
    </include>

    <node pkg="auto_landing" type="auto_landing_landing_node" name="auto_landing_landing_node" output="screen" args="-trajectory $(arg use_trajectory_generation) -use_odometry_for_platform $(arg use_odometry_for_platform)">
        <rosparam file="$(find auto_landing)/cfg/landing_params.yaml" />
        <remap from="mav_command"               to="$(arg mav_name)/command/track/pose" />
        <remap from="mav_odometry"              to="$(arg mav_name)/ground_truth/odometry" />
        <remap from="model_state"               to="gazebo/model_states" />
        <remap from="platform_odometry"         to="platform/odometry" />
        <remap from="mav_final_command"         to="$(arg mav_name)/command/pose" />
        <remap from="command_trajectory"        to="$(arg mav_name)/command/track/trajectory" />
        <remap from="command_trajectory_result" to="$(arg mav_name)/command/trajectory" />
    </node>

    <group if="$(arg use_detection)">
        <node pkg="detection" type="detection_detect_platform_node" name="detection_detect_platform_node" output="screen">
            <rosparam file="$(find auto_landing)/cfg/detect_platform_params.yaml" />
            <rosparam file="$(find auto_landing)/cfg/camera_params.yaml" />
            <remap from="image_raw"             to="$(arg mav_name)/camera_front/image_raw" />
            <remap from="height_quad"           to="$(arg mav_name)/ground_truth/odometry" />
        </node>

        <include file="$(find pose_estimation_ros)/launch/pose_estimation.launch" />
    </group>

</launch>
